#!/opt/puppetlabs/puppet/bin/ruby
#
# Calls ncio to backup the node classifier, and updates a git repo with changes.
#
# The destination backup directory must exist.
#
# Warning: Previous backups (if any) in the destination directory will be overwritten!
#
# Author: Jesse Reynolds - Puppet, Inc. - jesse.reynolds@puppet.com

require 'logger'
require 'open3'
require 'time'

def log(logger, severity, message)
  puts "#{severity.to_s.upcase} - #{message}"
  case severity
  when :info
    logger.info(message)
  when :warn
    logger.warn(message)
  when :error
    logger.error(message)
  end
end

puppet_bindir = '/opt/puppetlabs/puppet/bin'
ssldir        = '<%= $ssl_dir -%>'

my_dir   = ARGV[0]
certname = ARGV[1] || `#{puppet_bindir}/puppet config print certname`.chomp
failures = 0
thefile  = 'node_groups.json'

unless my_dir && my_dir != ''
  puts 'No backup directory specified, using /opt/pe_nc_backup'
  my_dir = '/opt/pe_nc_backup'
end

unless File.directory?(my_dir)
  raise "Directory does not exist at #{my_dir}"
end

logfile = File.join(my_dir, 'pe_nc_backup.log')
logger  = Logger.new(logfile, 10, 1_024_000)
log(logger, :info, "pe_nc_backup started at #{Time.now}")

repo_dir = File.join(my_dir, 'repo')
unless File.directory?(repo_dir)
  puts "Creating repo dir at #{repo_dir}"
  Dir.mkdir(repo_dir)
end

timestamp = Time.now.iso8601

log(logger, :info, "determined certname to be: #{certname}")

cmd = "#{puppet_bindir}/ncio --uri 'https://#{certname}:4433/classifier-api/v1' "
cmd += "--cert '#{ssldir}/certs/#{certname}.pem' "
cmd += "--key '#{ssldir}/private_keys/#{certname}.pem' "
cmd += "backup > '#{repo_dir}/#{thefile}'"

log(logger, :info, "Running command: [#{cmd}]")

Open3.popen2e(cmd) do |_stdin, stdout_err, wait_thr|
  # rubocop:disable Lint/AssignmentInCondition
  while line = stdout_err.gets
    log(logger, :info, line)
  end
  # rubocop:enable Lint/AssignmentInCondition

  exit_status = wait_thr.value
  if exit_status.success?
    log(logger, :info, 'Node groups backed up successfully.')
  else
    log(logger, :error, "Node groups backup has failed! ncio: #{exit_status}.")
    failures += 1
  end
end

# update git:

Dir.chdir(repo_dir)

if system('git status --porcelain')
  if failures.zero?

    # TODO: if the origin remote exists, try a pull from it (errors are non-fatal)

    unless system("git add #{thefile}")
      logger.error "Unable to git add #{thefile}: #{$CHILD_STATUS}"
      failures += 1
    end

    if `git status --porcelain #{thefile}` =~ %r{^\s*[AM]}
      unless system("git commit -m 'Update node groups by pe_nc_backup on #{certname} at #{timestamp}'")
        logger.error "Unable to make git commit: #{$CHILD_STATUS}"
        failures += 1
      end
    end

  # TODO: if there is an origin remote, try pushing to it

  else
    log(logger, :error, 'Failures encounted backing up node groups so git commit is being skipped.')
    failures += 1
  end
else
  log(logger, :error, "This does not appear to be a git repo here at #{Dir.pwd}")
  failures += 1
end

log(logger, :info, "Backup script complete at #{Time.now}")
if failures > 0
  logger.error "Errors (#{failures}) were encountered backing up Puppet Enterprise"
  exit 1
end
